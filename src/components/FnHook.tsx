import React, { FC, ReactElement }  from 'react'
import { useDispatch } from 'react-redux'
import { useSelector } from 'react-redux'
import { rootState } from '../store'
import { IAdminState } from '../store/reducers/admin'
import { ICountActionType } from '../store/reducers/count'
import { IUser, IUserActionType } from '../store/reducers/user'



interface IProps {
	count? : number
	addCount? (): void
	reduce?(): void
}


const FnHook:FC<IProps> = (props: IProps) : ReactElement => {

	/*‰ªé state ‰∏≠Ëé∑Âèñ count„ÄÅuser, Áî®<ËåÉÂûã>ËßÑËåÉ user ÁöÑÁ±ªÂûã, Âõ†‰∏∫‰πãÂâç admin ËßÑËåÉ‰∏∫ IAdminState ‰∫ÜÔºåuser Ê≤°ÊúâËßÑËåÉ‰∏∫ IAdminStateÔºåÊâÄ‰ª• user ÁöÑÁ±ªÂûãËßÑËåÉ‰ºöÊõ¥È∫ªÁÉ¶‰∫õ
		rootState ÂØπÂ∫î user Á±ªÂûã, {user:IUser} ÂØπÂ∫îËøîÂõûÂÄºÁöÑÁ±ªÂûã, state: rootState ÂØπÂ∫îÂÖ•ÂèÇÁöÑÁ±ªÂûã	*/
	const count = useSelector((state: rootState) => state.count )
	const { user } = useSelector<rootState, {user:IUser}>((state: rootState) => state.user )
	const { admin } = useSelector<rootState, IAdminState>((state: rootState) => state.admin)
	// console.log(count.count,user.name)//Á¨¨‰∏Ä‰∏™ user ÊòØ‰∏äÈù¢ÂÆö‰πâÁöÑ ÂØπË±°ÂèòÈáèÔºÅ

	// üî•üî•Âú®ÂáΩÊï∞ÂÜÖÈÉ®Ë∞ÉÁî® dispatch ÁöÑÂÜôÊ≥ï, Âπ∂ÂÆö‰πâ„Äêüî•ÂØπÂ∫îÁöÑ‰øÆÊîπÊï∞ÊçÆÁöÑÊñπÊ≥ïÔºÅ„Äë
	const dispatch = useDispatch()

	const changeUserName = () => {
		dispatch({
			type: IUserActionType.CHANGE,
			payload: { user: { id:1, name:'üçôÈ•≠Âõ¢' } }
		})
	}

	const addCount = () => {
		dispatch({
			type: ICountActionType.ADD,
			payload: { }
		})
	}

	const reducer = () => {
		dispatch({
			type: ICountActionType.REDUCE,
			payload: { }
		})
	}

	

	return (
		<>
			<h1>FnHook:
				<br />
				{admin.name}
				<br />
				{user.name}
				{count.count}
				<button onClick={ ()=>{addCount()} }> + </button>
				<button onClick={ ()=>{reducer()} }> - </button>
				<button onClick={ ()=>{changeUserName()} }> ChangeName </button>
			</h1>
		</>
	)
}


export default FnHook